{
 "categoryString": "EXTENSION",
 "dateBuilt": "2024-08-30T09:14:53+0200",
 "nonVisible": "true",
 "iconName": "aiwebres/small-icon.png",
 "methods": [
  {
   "deprecated": "false",
   "name": "BeginTransaction",
   "description": "Begins a transaction on an open database. Nested transactions are supported.",
   "params": []
  },
  {
   "deprecated": "false",
   "name": "CloseDatabase",
   "description": "Closes the database. If the database is already closed, nothing happens. Any uncommited transactions will be rolled back.",
   "params": []
  },
  {
   "deprecated": "false",
   "name": "CommitTransaction",
   "description": "Commits the last open transaction.",
   "params": []
  },
  {
   "deprecated": "false",
   "name": "DatabaseExists",
   "description": "Returns true if the database file exists, false otherwise.",
   "params": [],
   "returnType": "boolean"
  },
  {
   "deprecated": "false",
   "name": "DatabasePath",
   "description": "Returns the full path to the database, even if it doesn't exist yet.",
   "params": [],
   "returnType": "text"
  },
  {
   "deprecated": "false",
   "name": "Delete",
   "description": "Executes a SQL DELETE statement. There whereClause is optional. All rows in the table will be deleted if no whereClause is specified. Each bind parameter replaces the corresponding '?' in whereClause. Returns the number of rows affected if a whereClause is passed in, 0 otherwise.If an error occurs or the database is not open, -1 is returned.",
   "params": [
    {
     "name": "table",
     "type": "text"
    },
    {
     "name": "whereClause",
     "type": "text"
    },
    {
     "name": "bindParams",
     "type": "list"
    }
   ],
   "returnType": "number"
  },
  {
   "deprecated": "false",
   "name": "DeleteAsync",
   "description": "Executes a SQL DELETE statement. The tag identifies the result of this call in the AfterDelete event. See Delete for more information.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "table",
     "type": "text"
    },
    {
     "name": "whereClause",
     "type": "text"
    },
    {
     "name": "bindParams",
     "type": "list"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "DeleteDatabase",
   "description": "Deletes a closed database. This deletes the database file permanently.",
   "params": []
  },
  {
   "deprecated": "false",
   "name": "Execute",
   "description": "Execute a single, parameterized SQL statement that is NOT a SELECT and returns whether or not it succeeded. Each bind parameter replaces the corresponding '?' in WHERE clause in the query. If the database is not open, false is returned.",
   "params": [
    {
     "name": "sql",
     "type": "text"
    },
    {
     "name": "bindParams",
     "type": "list"
    }
   ],
   "returnType": "boolean"
  },
  {
   "deprecated": "false",
   "name": "ExecuteAsync",
   "description": "Execute a single, parameterized SQL statement that is NOT a SELECT and returns whether or not it succeeded. The tag identifies the result of this call in the AfterExecute event. See ExecParamSQL for more information.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "sql",
     "type": "text"
    },
    {
     "name": "bindParams",
     "type": "list"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "ExecuteFile",
   "description": "Executes multiple SQL statements from a file and returns the count of statements successfully executed. Each line of the file should be a complete non-SELECT SQL statement, optionally followed by a semicolon. Single line (--) and multiline (/*...*/) comments are ignored. Line continuation using '' is supported. 'n' are replaced with actual newlines. Execution stops at the first error. If the database is not open, -1 is returned. Prefix the filename with / to read from a specific file on the SD card. To read assets packaged with an application (also works for the Companion) start the filename with // (two slashes). If a filename does not start with a slash, it will be read from the applications private storage (for packaged apps) and from /sdcard/AppInventor/data for the Companion.",
   "params": [{
    "name": "fileName",
    "type": "text"
   }],
   "returnType": "number"
  },
  {
   "deprecated": "false",
   "name": "ExecuteFileAsync",
   "description": "Executes multiple SQL statements from a file, asynchronously. The tag identifies the result of this call in the AfterExecuteFile event. See ExecFile for more information.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "fileName",
     "type": "text"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "ExportDatabase",
   "description": "Exports the currently closed database to the specified file. The resulting file is a complete SQLite database.Returns true if the import was successful, false otherwise.",
   "params": [{
    "name": "fileName",
    "type": "text"
   }],
   "returnType": "boolean"
  },
  {
   "deprecated": "false",
   "name": "ImportDatabase",
   "description": "Imports a SQLite database completely replacing the currently closed database. Returns true if the import was successful, false otherwise.",
   "params": [{
    "name": "fileName",
    "type": "text"
   }],
   "returnType": "boolean"
  },
  {
   "deprecated": "false",
   "name": "ImportDatabaseASync",
   "description": "Imports a SQLite database completely replacing the currently closed database. Returns true if the import was successful, false otherwise.",
   "params": [{
    "name": "fileName",
    "type": "text"
   }]
  },
  {
   "deprecated": "false",
   "name": "Insert",
   "description": "Executes a SQL INSERT statement. columns contains a list of column names. values contains a list of column values. Returns the row ID of the newly inserted row. If the error occurs or the database is not open, -1 is returned.",
   "params": [
    {
     "name": "table",
     "type": "text"
    },
    {
     "name": "columns",
     "type": "list"
    },
    {
     "name": "values",
     "type": "list"
    }
   ],
   "returnType": "number"
  },
  {
   "deprecated": "false",
   "name": "InsertAsync",
   "description": "Executes a SQL INSERT statement, asynchronously. The tag identifies the result of this call in the AfterInsert event. See Insert for more information.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "table",
     "type": "text"
    },
    {
     "name": "columns",
     "type": "list"
    },
    {
     "name": "values",
     "type": "list"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "InsertFile",
   "description": "Inserts multiple rows of data from a file into a table. The first line of the file should be a CSV list of the column names. Each of the remaining lines should be a CSV list of values for each new row. Empty lines are ignored. Line continuation using '' is supported. 'n' are replaced with actual newlines. Insertion stops at the first error. If the database is not open, -1 is returned. Prefix the filename with / to read from a specific file on the SD card. To read assets packaged with an application (also works for the Companion) start the filename with // (two slashes). If a filename does not start with a slash, it will be read from the applications private storage (for packaged apps) and from /sdcard/AppInventor/data for the Companion.",
   "params": [
    {
     "name": "table",
     "type": "text"
    },
    {
     "name": "fileName",
     "type": "text"
    }
   ],
   "returnType": "number"
  },
  {
   "deprecated": "false",
   "name": "InsertFileAsync",
   "description": "Inserts multiple rows of data from a file into a table, asynchronously. The tag identifies the result of this call in the AfterInsertFile event. See InsertFile for more information.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "table",
     "type": "text"
    },
    {
     "name": "fileName",
     "type": "text"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "IsDatabaseOpen",
   "description": "Returns true if the database is open, false otherwise.",
   "params": [],
   "returnType": "boolean"
  },
  {
   "deprecated": "false",
   "name": "ListFixer",
   "description": "fixes multi-column lists from SELECT",
   "params": [{
    "name": "aList",
    "type": "list"
   }],
   "returnType": "any"
  },
  {
   "deprecated": "false",
   "name": "OpenDatabase",
   "description": "Opens the database. If the database is already open, nothing happens.",
   "params": []
  },
  {
   "deprecated": "false",
   "name": "Replace",
   "description": "Executes a SQL REPLACE statement. columns contains a list of column names. values contains a list of column values. Returns the row ID of the newly inserted or updated row. If the error occurs or the database is not open, -1 is returned.",
   "params": [
    {
     "name": "table",
     "type": "text"
    },
    {
     "name": "columns",
     "type": "list"
    },
    {
     "name": "values",
     "type": "list"
    }
   ],
   "returnType": "number"
  },
  {
   "deprecated": "false",
   "name": "ReplaceAsync",
   "description": "Executes a SQL REPLACE statement, asynchronously. The tag identifies the result of this call in the AfterReplace event. See Replace for more information.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "table",
     "type": "text"
    },
    {
     "name": "columns",
     "type": "list"
    },
    {
     "name": "values",
     "type": "list"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "RollbackTransaction",
   "description": "Rolls back the last open transaction.",
   "params": []
  },
  {
   "deprecated": "false",
   "name": "Select",
   "description": "Executes a SQL SELECT statement. There whereClause is optional. All rows in the table will be returned if no whereClause is specified. Each bind parameter replaces the corresponding '?' in whereClause. groupBy is optional. If not specified, no grouping will be performed. having is optional. If not specified, all row groups will be returned. orderBy is optional. If not specified, rows will be returned unordered. limit is optional. If not specified, all matching rows will be returned. If selecting only a single column, each element in the returned list is the value of that column for each result row. If selecting multiple columns, each element of the returned list is itself a list of values for each selected column. If the ReturnColumnNames option is true, each column value will be a two element list where the first element is the column name and the second element is the column value. See SelectRawSQL for more information on the returned list.",
   "params": [
    {
     "name": "table",
     "type": "text"
    },
    {
     "name": "distinct",
     "type": "boolean"
    },
    {
     "name": "columns",
     "type": "list"
    },
    {
     "name": "whereClause",
     "type": "text"
    },
    {
     "name": "bindParams",
     "type": "list"
    },
    {
     "name": "groupBy",
     "type": "text"
    },
    {
     "name": "having",
     "type": "text"
    },
    {
     "name": "orderBy",
     "type": "text"
    },
    {
     "name": "limit",
     "type": "text"
    }
   ],
   "returnType": "list"
  },
  {
   "deprecated": "false",
   "name": "SelectAsync",
   "description": "Executes a SQL SELECT statement, asynchronously. The tag identifies the result of this call in the AfterSelect event. See Select for more information.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "table",
     "type": "text"
    },
    {
     "name": "distinct",
     "type": "boolean"
    },
    {
     "name": "columns",
     "type": "list"
    },
    {
     "name": "whereClause",
     "type": "text"
    },
    {
     "name": "bindParams",
     "type": "list"
    },
    {
     "name": "groupBy",
     "type": "text"
    },
    {
     "name": "having",
     "type": "text"
    },
    {
     "name": "orderBy",
     "type": "text"
    },
    {
     "name": "limit",
     "type": "text"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "SelectSQL",
   "description": "Execute a single, parameterized SQL SELECT statement and returns a list of records. Each bind parameter replaces the corresponding '?' in WHERE clause in the query. If selecting only a single column, each element in the returned list is the value of that column for each result row. If selecting multiple columns, each element of the returned list is itself a list of values for each selected column. If the ReturnColumnNames option is true, each column value will be a two element list where the first element is the column name and the second element is the column value. If the database is not open, an empty list is returned.",
   "params": [
    {
     "name": "sql",
     "type": "text"
    },
    {
     "name": "bindParams",
     "type": "list"
    }
   ],
   "returnType": "list"
  },
  {
   "deprecated": "false",
   "name": "SelectSQLAsync",
   "description": "Execute a single, parameterized SQL SELECT statement, asynchronously. The tag identifies the result of this call in the AfterSelect event. See SelectSQL for more information.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "sql",
     "type": "text"
    },
    {
     "name": "bindParams",
     "type": "list"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "TableCount",
   "description": "Returns the number of tables in the database, or -1 if an error occurs or the database is not open.",
   "params": [],
   "returnType": "number"
  },
  {
   "deprecated": "false",
   "name": "TableExists",
   "description": "Returns true if the table exists in the database, or false if the table does not exist or an error occurs or the database is not open.",
   "params": [{
    "name": "table",
    "type": "text"
   }],
   "returnType": "boolean"
  },
  {
   "deprecated": "false",
   "name": "TableNames",
   "description": "Returns a list of names of the tables in the database, or an empty list if an error occurs or the database is not open.",
   "params": [],
   "returnType": "list"
  },
  {
   "deprecated": "false",
   "name": "TableRowCount",
   "description": "Returns the number of rows in a table, or -1 if an error occurs or the database is not open.",
   "params": [{
    "name": "table",
    "type": "text"
   }],
   "returnType": "number"
  },
  {
   "deprecated": "false",
   "name": "Update",
   "description": "Executes a SQL UPDATE statement. columns contains a list of column names. values contains a list of column values. There whereClause is optional. All rows in the table will be updated if no whereClause is specified. Each bind parameter replaces the corresponding '?' in whereClause. Returns the number of rows affected.If an error occurs or the database is not open, -1 is returned.",
   "params": [
    {
     "name": "table",
     "type": "text"
    },
    {
     "name": "columns",
     "type": "list"
    },
    {
     "name": "values",
     "type": "list"
    },
    {
     "name": "whereClause",
     "type": "text"
    },
    {
     "name": "bindParams",
     "type": "list"
    }
   ],
   "returnType": "number"
  },
  {
   "deprecated": "false",
   "name": "UpdateAsync",
   "description": "Executes a SQL UPDATE statement, asynchronously. The tag identifies the result of this call in the AfterUpdate event. See Update for more information.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "table",
     "type": "text"
    },
    {
     "name": "columns",
     "type": "list"
    },
    {
     "name": "values",
     "type": "list"
    },
    {
     "name": "whereClause",
     "type": "text"
    },
    {
     "name": "bindParams",
     "type": "list"
    }
   ]
  }
 ],
 "blockProperties": [
  {
   "rw": "read-write",
   "deprecated": "false",
   "name": "DBName",
   "description": "Specifies the name of the database.",
   "type": "text",
   "category": "Behavior"
  },
  {
   "rw": "read-write",
   "deprecated": "false",
   "name": "DBVersion",
   "description": "Specified the version of the database.",
   "type": "number",
   "category": "Behavior"
  },
  {
   "rw": "read-write",
   "deprecated": "false",
   "name": "DebugDialog",
   "description": "Specifies whether debug messages should be displayed in dialogs.",
   "type": "boolean",
   "category": "Behavior"
  },
  {
   "rw": "read-write",
   "deprecated": "false",
   "name": "DebugToast",
   "description": "Specifies whether debug messages should be displayed as Toast messages.",
   "type": "boolean",
   "category": "Behavior"
  },
  {
   "rw": "read-write",
   "deprecated": "false",
   "name": "ReturnColumnNames",
   "description": "Specifies whether lists of results will contain column names. See the query blocks for more information.",
   "type": "boolean",
   "category": "Behavior"
  }
 ],
 "helpUrl": "",
 "licenseName": "",
 "type": "org.bennedum.SQLite.SQLite",
 "androidMinSdk": "7",
 "version": "3",
 "external": "true",
 "showOnPalette": "true",
 "name": "SQLite",
 "helpString": "SQLite database interface.",
 "properties": [
  {
   "defaultValue": "db.sqlite",
   "name": "DBName",
   "editorArgs": [],
   "editorType": "string"
  },
  {
   "defaultValue": "1",
   "name": "DBVersion",
   "editorArgs": [],
   "editorType": "integer"
  },
  {
   "defaultValue": "false",
   "name": "DebugDialog",
   "editorArgs": [],
   "editorType": "boolean"
  },
  {
   "defaultValue": "false",
   "name": "DebugToast",
   "editorArgs": [],
   "editorType": "boolean"
  },
  {
   "defaultValue": "false",
   "name": "ReturnColumnNames",
   "editorArgs": [],
   "editorType": "boolean"
  }
 ],
 "events": [
  {
   "deprecated": "false",
   "name": "AfterDelete",
   "description": "This event fires after an asynchronous Delete call. The tag specified in the original call and the number of deleted rows are provided.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "rowCount",
     "type": "number"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "AfterExecute",
   "description": "This event fires after an ExecuteSQLAsync call. The tag specified in the original call and the result of the execution are provided.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "result",
     "type": "boolean"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "AfterExecuteFile",
   "description": "This event fires after an ExecuteFileAsync. The tag specified in the original call and the result of the execution are provided.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "execCount",
     "type": "number"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "AfterInsert",
   "description": "This event fires after an asynchronous Insert call. The tag specified in the original call and the row ID of the new row are provided.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "rowId",
     "type": "number"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "AfterInsertFile",
   "description": "This event fires after an asynchronous InsertFile call. The tag specified in the original call and the count of inserted rows are provided.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "rowCount",
     "type": "number"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "AfterReplace",
   "description": "This event fires after an asynchronous Replace call. The tag specified in the original call and the row ID of the new or updated row are provided.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "rowId",
     "type": "number"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "AfterSelect",
   "description": "This event fires after an asynchronous Select call. The tag specified in the original call, the number of returned rows, and the result rows are provided.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "rowCount",
     "type": "number"
    },
    {
     "name": "rows",
     "type": "list"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "AfterUpdate",
   "description": "This event fires after an asynchronous Update call. The tag specified in the original call and the number of changed rows are provided.",
   "params": [
    {
     "name": "tag",
     "type": "text"
    },
    {
     "name": "rowCount",
     "type": "number"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "DatabaseClosed",
   "description": "This event fires when the database is closed.",
   "params": []
  },
  {
   "deprecated": "false",
   "name": "DatabaseCreated",
   "description": "This event fires when the database is created.",
   "params": []
  },
  {
   "deprecated": "false",
   "name": "DatabaseDowngrade",
   "description": "This event fires when the database is downgraded. The previous and new version numbers are provided. Use this event to modify the database as required by the version change.",
   "params": [
    {
     "name": "oldVersion",
     "type": "number"
    },
    {
     "name": "newVersion",
     "type": "number"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "DatabaseOpened",
   "description": "This event fires when the database is opened.",
   "params": []
  },
  {
   "deprecated": "false",
   "name": "DatabaseUpgrade",
   "description": "This event fires when the database is upgraded. The previous and new version numbers are provided. Use this event to modify the database as required by the version change.",
   "params": [
    {
     "name": "oldVersion",
     "type": "number"
    },
    {
     "name": "newVersion",
     "type": "number"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "Imported",
   "description": "Event indicating that import of the DB filename has finished.",
   "params": [
    {
     "name": "successful",
     "type": "boolean"
    },
    {
     "name": "response",
     "type": "text"
    }
   ]
  },
  {
   "deprecated": "false",
   "name": "SQLError",
   "description": "This event fires when a SQL error occurs. The error message is provided.",
   "params": [{
    "name": "message",
    "type": "text"
   }]
  }
 ]
}